{"version":3,"file":"cardano-launcher.cjs.development.js","sources":["../src/logging.ts","../src/service.ts","../src/byron.ts","../src/shelley.ts","../src/jormungandr.ts","../src/cardanoLauncher.ts","../src/cli.ts"],"sourcesContent":["/**\n * Cheap and cheerful logging functions.\n * Same as what is already in Daedalus.\n * Plug in your own logging by implementing [[Logger]].\n *\n * @packageDocumentation\n /*\n\n/**\n * Logging adapter.\n */\nexport interface Logger {\n  debug: LogFunc;\n  info: LogFunc;\n  error: LogFunc;\n}\n\n/**\n * Function which logs a message and optional object.\n */\nexport interface LogFunc {\n  (msg: string, param?: any): void;\n}\n\n/**\n * Create a new logger with a context name added.\n *\n * @param logger - existing logger.\n * @param name - context to prepend.\n * @return - a new logger.\n */\nexport function prependName(logger: Logger, name: string): Logger {\n  const prefix = (\n    severity: 'debug' | 'info' | 'error',\n    msg: string,\n    param?: any\n  ) => {\n    const prefixed = `${name}: ${msg}`;\n    if (param) {\n      logger[severity](prefixed, param);\n    } else {\n      logger[severity](prefixed);\n    }\n  };\n  return {\n    debug: (msg: string, param?: any) => prefix('debug', msg, param),\n    info: (msg: string, param?: any) => prefix('info', msg, param),\n    error: (msg: string, param?: any) => prefix('error', msg, param),\n  };\n}\n","/**\n * Functions for starting and stopping an individual backend service.\n *\n * The important function is [[setupService]] which creates a [[Service]].\n *\n * @packageDocumentation\n */\n\nimport { spawn, ChildProcess } from 'child_process';\nimport { EventEmitter } from 'tsee';\nimport _ from 'lodash';\n\nimport { Logger } from './logging';\n\nexport interface ServiceExitStatus {\n  /** Program name. */\n  exe: string;\n  /** Process exit status code, if process exited itself. */\n  code: number | null;\n  /** Signal name, if process was killed. */\n  signal: string | null;\n  /** Error object, if process could not be started, or could not be killed. */\n  err: Error | null;\n}\n\n/**\n * Produce an exit message from an exit status.\n * @param res - exit status of service.\n * @return a human readable exit message.\n */\nexport function serviceExitStatusMessage(res: ServiceExitStatus): string {\n  const reason =\n    typeof res.code === 'number'\n      ? `status ${res.code}`\n      : res.signal\n      ? `signal ${res.signal}`\n      : `error ${res.err}`;\n\n  return `${res.exe} exited with ${reason}`;\n}\n\n/**\n * States for a launched process.  The processes are not guaranteed to\n * use all of these states. For example, a process may go directly\n * from `Started` to `Stopped`.\n */\nexport enum ServiceStatus {\n  /** Initial state. */\n  NotStarted,\n  /** Waiting for [[StartService]] info. */\n  Starting,\n  /** Subprocess has been started and has a PID. */\n  Started,\n  /** Caller has requested to stop the process. Now waiting for it to exit, or for the timeout to elapse. */\n  Stopping,\n  /** Subprocess has exited or been killed. */\n  Stopped,\n}\n\n/**\n * A launched process.\n */\nexport interface Service {\n  /**\n   * @return a promise that will be fulfilled when the process has\n   *   started. The returned PID is not guaranteed to be running. It may\n   *   already have exited.\n   */\n  start(): Promise<Pid>;\n\n  /**\n   * Stops the process.\n   * @param timeoutSeconds - how long to wait for the service to stop itself before killing it.\n   *   If `0`, any running timeout kill be cancelled and the process killed immediately.\n   * @return a promise that will be fulfilled when the process has stopped.\n   */\n  stop(timeoutSeconds?: number): Promise<ServiceExitStatus>;\n\n  /**\n   * Waits for the process to finish somehow -- whether it exits by\n   * itself, or exits due to `stop()` being called.\n   *\n   * @return a promise that will be fulfilled when the process has exited.\n   */\n  waitForExit(): Promise<ServiceExitStatus>;\n\n  /**\n   * @return the status of this process.\n   */\n  getStatus(): ServiceStatus;\n\n  /**\n   * @return the ChildProcess running the service, or null if the service has not been started yet.\n   */\n  getProcess(): ChildProcess | null;\n\n  /**\n   * An [[EventEmitter]] that can be used to register handlers when\n   * the process changes status.\n   *\n   * ```typescript\n   * launcher.walletService.events.on('statusChanged', status => { ... });\n   * ```\n   */\n  events: ServiceEvents;\n}\n\n/** Process ID */\nexport type Pid = number;\n\n/**\n * The type of events for [[Service]].\n */\ntype ServiceEvents = EventEmitter<{\n  /**\n   * [[Launcher.walletService.events]] and\n   * [[Launcher.nodeService.events]] will emit this when their\n   * processes start or stop.\n   * @event\n   */\n  statusChanged: (status: ServiceStatus) => void;\n}>;\n\n/**\n * Initialise a [[Service]] which can control the lifetime of a\n * backend process.\n *\n * This does not start the process. Use [[Service.start]] for that.\n *\n * @param cfgPromise - a promise which will return the command to run.\n * @param logger - logging object.\n * @return A handle on the [[Service]].\n */\nexport function setupService(\n  cfgPromise: Promise<StartService>,\n  logger: Logger = console\n): Service {\n  const events = new EventEmitter<{\n    statusChanged: (status: ServiceStatus) => void;\n  }>();\n\n  // What the current state is.\n  let status = ServiceStatus.NotStarted;\n  // Fulfilled promise of service command-line.\n  // This will always be defined if status > Starting.\n  let cfg: StartService;\n  // NodeJS child process object, or null if not running.\n  let proc: ChildProcess | null = null;\n  // How the child process exited, or null if it hasn't yet exited.\n  let exitStatus: ServiceExitStatus | null;\n  // For cancelling the kill timeout.\n  let killTimer: NodeJS.Timeout | null = null;\n  let startPromise: Promise<Pid>;\n\n  const doStart = async () => {\n    const envStr = _.map(\n      cfg.extraEnv,\n      (value, name) => `${name}=${value} `\n    ).join('');\n    const commandStr = `${envStr}${cfg.command} ${cfg.args.join(' ')}`;\n    logger.info(`Service.start: trying to start ${commandStr}`, cfg);\n\n    const stdio = [\n      cfg.supportsCleanShutdown ? 'pipe' : 'ignore',\n      'inherit',\n      'inherit',\n    ];\n    const cwd = cfg.cwd ? { cwd: cfg.cwd } : {};\n    const env = cfg.extraEnv\n      ? { env: Object.assign({}, process.env, cfg.extraEnv) }\n      : {};\n    const options = Object.assign({ stdio }, cwd, env);\n    try {\n      proc = spawn(cfg.command, cfg.args, options);\n    } catch (err) {\n      logger.error(`Service.start: child_process.spawn() failed: ${err}`);\n      logger.error(\n        `Service.start: child_process.spawn(${cfg.command}, ${cfg.args.join(\n          ' '\n        )}, ...)`,\n        options\n      );\n      throw err;\n    }\n    setStatus(ServiceStatus.Started);\n    proc.on('exit', (code, signal) => {\n      onStopped(code, signal);\n    });\n    proc.on('error', err => {\n      logger.error(`Service.start: child_process failed: ${err}`);\n      onStopped(null, null, err);\n    });\n    return proc.pid;\n  };\n\n  const doStop = (timeoutSeconds: number) => {\n    logger.info(`Service.stop: trying to stop ${cfg.command}`, cfg);\n    setStatus(ServiceStatus.Stopping);\n    if (proc) {\n      if (cfg.supportsCleanShutdown && proc.stdin) {\n        proc.stdin.end();\n      } else {\n        proc.kill('SIGTERM');\n      }\n    }\n    killTimer = setTimeout(() => {\n      if (proc) {\n        logger.info(\n          `Service.stop: timed out after ${timeoutSeconds} seconds. Killing process ${proc.pid}.`\n        );\n        proc.kill('SIGKILL');\n      }\n    }, timeoutSeconds * 1000);\n  };\n\n  const onStopped = (\n    code: number | null = null,\n    signal: string | null = null,\n    err: Error | null = null\n  ) => {\n    exitStatus = { exe: cfg.command, code, signal, err };\n    logger.debug(`Service onStopped`, exitStatus);\n    if (killTimer) {\n      clearTimeout(killTimer);\n      killTimer = null;\n    }\n    proc = null;\n    setStatus(ServiceStatus.Stopped);\n  };\n\n  const waitForStop = (): Promise<ServiceExitStatus> =>\n    new Promise(resolve => {\n      logger.debug(`Service.stop: waiting for ServiceStatus.Stopped`);\n      events.on('statusChanged', status => {\n        if (status === ServiceStatus.Stopped && exitStatus) {\n          resolve(exitStatus);\n        }\n      });\n    });\n\n  const waitForExit = (): Promise<ServiceExitStatus> => {\n    const defaultExitStatus = {\n      exe: cfg ? cfg.command : '',\n      code: null,\n      signal: null,\n      err: null,\n    };\n    switch (status) {\n      case ServiceStatus.NotStarted:\n      case ServiceStatus.Starting:\n        return new Promise(resolve => {\n          status = ServiceStatus.Stopped;\n          exitStatus = defaultExitStatus;\n          resolve(exitStatus);\n        });\n      case ServiceStatus.Started:\n        return waitForStop();\n      case ServiceStatus.Stopping:\n        return waitForStop();\n      case ServiceStatus.Stopped:\n        return new Promise(resolve => resolve(exitStatus || defaultExitStatus));\n    }\n  };\n\n  const setStatus = (newStatus: ServiceStatus): void => {\n    logger.debug(\n      `setStatus ${ServiceStatus[status]} -> ${ServiceStatus[newStatus]}`\n    );\n    status = newStatus;\n    events.emit('statusChanged', status);\n  };\n\n  return {\n    start: async () => {\n      switch (status) {\n        case ServiceStatus.NotStarted:\n          setStatus(ServiceStatus.Starting);\n          startPromise = cfgPromise.then(theCfg => {\n            cfg = theCfg;\n            return doStart();\n          });\n          return startPromise;\n        case ServiceStatus.Starting:\n          logger.info(`Service.start: already starting`);\n          return startPromise;\n        case ServiceStatus.Started:\n          logger.info(`Service.start: already started`);\n          return proc ? proc.pid : -1;\n        case ServiceStatus.Stopping:\n          logger.info(`Service.start: cannot start - already stopping`);\n          return -1;\n        case ServiceStatus.Stopped:\n          logger.info(`Service.start: cannot start - already stopped`);\n          return -1;\n      }\n    },\n    stop: async (timeoutSeconds: number = 60): Promise<ServiceExitStatus> => {\n      switch (status) {\n        case ServiceStatus.NotStarted:\n          logger.info(`Service.stop: cannot stop - never started`);\n          break;\n        case ServiceStatus.Starting:\n        case ServiceStatus.Started:\n          doStop(timeoutSeconds);\n          break;\n        case ServiceStatus.Stopping:\n          if (timeoutSeconds === 0 && proc) {\n            logger.info(\n              `Service.stop: was already stopping, but will now kill process ${proc.pid} immediately`\n            );\n            proc.kill('SIGKILL');\n          } else {\n            logger.info(`Service.stop: already stopping`);\n          }\n          break;\n        case ServiceStatus.Stopped:\n          logger.info(`Service.stop: already stopped`);\n          break;\n      }\n      return waitForExit();\n    },\n    waitForExit,\n    getStatus: () => status,\n    getProcess: () => proc,\n    events,\n  };\n}\n\n/**\n * Describes the command to run for the service.\n */\nexport interface StartService {\n  /** Program name. Will be searched for in `PATH`. */\n  command: string;\n  /** Command-line arguments. */\n  args: string[];\n  /** Directory to start program in. Helpful if it outputs files. */\n  cwd?: string;\n  /** Additional environment variables to set, on top of the current process environment. */\n  extraEnv?: { [propName: string]: string };\n  /**\n   * Whether this service supports the clean shutdown method documented in\n   * `docs/windows-clean-shutdown.md`.\n   */\n  supportsCleanShutdown: boolean;\n}\n","/**\n * Configuration for `cardano-node` (Byron)\n *\n * @packageDocumentation\n */\n\nimport path from 'path';\nimport getPort from 'get-port';\n\nimport { StartService } from './service';\nimport { FilePath, DirPath } from './common';\n\n/** Predefined networks. */\nexport const networks: { [propName: string]: ByronNetwork } = {\n  mainnet: {\n    configFile: 'configuration-mainnet.yaml',\n    genesisFile: 'mainnet-genesis.json',\n    genesisHash:\n      '5f20df933584822601f9e3f8c024eb5eb252fe8cefb24d1317dc3d432e940ebb',\n    topologyFile: 'mainnet-topology.json',\n  },\n};\n\n/**\n * Definition of a `cardano-node` (Byron) network.\n */\nexport interface ByronNetwork {\n  configFile: FilePath;\n  genesisFile: FilePath;\n  genesisHash: string;\n  topologyFile: FilePath;\n}\n\n/**\n * Configuration parameters for starting the rewritten version of\n * cardano-node (Byron).\n */\nexport interface ByronNodeConfig {\n  kind: 'byron';\n\n  /** Directory containing configurations for all networks. */\n  configurationDir: DirPath;\n\n  /** Network parameters */\n  network: ByronNetwork;\n\n  /**\n   * Directory which will contain a socket file to use for\n   * communicating with the node. Optional -- will be set\n   * automatically if not provided.\n   */\n  socketDir?: DirPath;\n}\n\n/**\n * The command-line arguments which can be supplied to `cardano-node` (Byron).\n */\nexport interface ByronNodeArgs {\n  /**\n   * Directory which will contain a socket file to use for\n   * communicating with the node.\n   */\n  socketDir: DirPath;\n\n  /**\n   * The path to a file describing the topology.\n   * Topology is ...\n   */\n  topologyFile: FilePath;\n\n  /** Directory where the state is stored. */\n  databaseDir: DirPath;\n\n  /** Path to the delegation certificate. */\n  delegationCertificate?: string;\n\n  /** Path to the signing key. */\n  signingKey?: string;\n\n  /** The genesis block for this network's chain. */\n  genesis: {\n    /** The filename of the genesis block. */\n    file: FilePath;\n    /** The hash of the genesis block. */\n    hash: string;\n  };\n\n  /** Configures the address to bind for P2P communication. */\n  listen: {\n    /** The TCP port for node P2P. */\n    port: number;\n    /** Optionally limit node P2P to one ipv6 or ipv4 address. */\n    address?: string;\n  };\n\n  /** Configuration file for the cardano-node. */\n  configFile: FilePath;\n\n  /** Validate all on-disk database files. */\n  validateDb?: boolean;\n\n  /**\n   * Extra arguments to add to the `cardano-node` command line.\n   */\n  extra?: string[];\n}\n\n/**\n * Convert a [[ByronNodeConfig]] into command-line arguments\n * ([[ByronNodeArgs]]) for `cardano-node`.\n */\nfunction makeArgs(\n  stateDir: DirPath,\n  config: ByronNodeConfig,\n  listenPort: number\n): ByronNodeArgs {\n  if (!config.socketDir) {\n    config.socketDir = 'sockets'; // relative to working directory\n  }\n  return {\n    socketDir: config.socketDir,\n    topologyFile: path.join(\n      config.configurationDir,\n      config.network.topologyFile\n    ),\n    databaseDir: 'chain', // relative to working directory\n    genesis: {\n      file: path.join(config.configurationDir, config.network.genesisFile),\n      hash: config.network.genesisHash,\n    },\n    listen: {\n      port: listenPort,\n    },\n    configFile: path.join(config.configurationDir, config.network.configFile),\n  };\n}\n\n/**\n * Chooses the command-line arguments for the node.\n *\n * @param stateDir - directory for node storage, specific to the node type and network.\n * @param config - parameters for starting the node.\n * @return the command-line for starting this node.\n */\nexport async function startByronNode(\n  stateDir: DirPath,\n  config: ByronNodeConfig\n): Promise<StartService> {\n  const listenPort = await getPort();\n  const args = makeArgs(stateDir, config, listenPort);\n  return {\n    command: 'cardano-node',\n    args: [\n      '--socket-dir',\n      args.socketDir,\n      '--topology',\n      args.topologyFile,\n      '--database-path',\n      args.databaseDir,\n      '--genesis-file',\n      args.genesis.file,\n      '--genesis-hash',\n      args.genesis.hash,\n      '--port',\n      '' + args.listen.port,\n      '--config',\n      args.configFile,\n    ]\n      .concat(args.listen.address ? ['--host-addr', args.listen.address] : [])\n      .concat(args.validateDb || false ? ['--validate-db'] : [])\n      .concat(args.signingKey ? ['--signing-key', args.signingKey] : [])\n      .concat(\n        args.delegationCertificate\n          ? ['--delegation-certificate', args.delegationCertificate]\n          : []\n      )\n      .concat(args.extra || []),\n    supportsCleanShutdown: false,\n    // set working directory to stateDir -- config file may have relative paths for logs.\n    cwd: stateDir,\n  };\n}\n","/**\n * Configuration for `cardano-node` (Shelley).\n *\n * @packageDocumentation\n */\n\nimport { StartService } from './service';\n\n/**\n * Configuration parameters for starting cardano-node (Shelley).\n *\n * Unimplemented!\n */\nexport interface ShelleyNodeConfig {\n  kind: 'shelley';\n\n  /**\n   * Directory which will contain a socket file to use for communicating with the node.\n   * Defaults to a subdirectory of the state directory.\n   */\n  socketDir?: string;\n\n  /**\n   * Contents of the `cardano-node` config file.\n   */\n  extraConfig?: { [propName: string]: any };\n\n  /**\n   * Extra arguments to add to the `cardano-node` command line.\n   */\n  extraArgs?: string[];\n}\n\nexport async function startShelleyNode(\n  config: ShelleyNodeConfig\n): Promise<StartService> {\n  throw new Error('shelley backend not implemented');\n  // return {\n  //   command: \"cardano-node\", args: [\"--help\"]\n  // };\n}\n","/**\n * Configuration for Jörmungandr.\n *\n * @packageDocumentation\n */\n\nimport path from 'path';\nimport _ from 'lodash';\nimport getPort from 'get-port';\nimport { StartService } from './service';\nimport { FilePath, DirPath } from './common';\n\n/**\n * Pre-defined networks for `jormungandr`. The \"self\" config is a\n * special one to create a local node.\n *\n * The config files are cached in the `test/data/jormungandr` directory of this repo.\n *\n * Download the latest configs from\n *   https://hydra.iohk.io/job/Cardano/iohk-nix/jormungandr-deployment/latest/download/1/index.html\n *\n */\nexport const networks: { [propName: string]: JormungandrNetwork } = {\n  itn_rewards_v1: {\n    configFile: 'itn_rewards_v1-config.yaml',\n    genesisBlock: {\n      hash: '8e4d2a343f3dcf9330ad9035b3e8d168e6728904262f2c434a4f8f934ec7b676',\n    },\n  },\n  self: {\n    configFile: 'config.yaml',\n    genesisBlock: {\n      file: 'block0.bin',\n      hash: 'f8c0622ea4b768421fea136a6e5a4e3b4c328fc5f16fad75817e40c8a2a56a56',\n    },\n    secretFile: ['secret.yaml'],\n  },\n};\n\n/**\n * Definition of a Jörmungandr network.\n */\nexport interface JormungandrNetwork {\n  configFile: FilePath;\n  genesisBlock: GenesisBlockHash | GenesisBlockFile;\n  secretFile?: FilePath[];\n}\n\n/**\n * Configuration parameters for starting the node.\n */\nexport interface JormungandrConfig {\n  kind: 'jormungandr';\n\n  /** Directory containing configurations for all networks. */\n  configurationDir: DirPath;\n\n  /** Network parameters */\n  network: JormungandrNetwork;\n\n  /** Optionally select a port for the node REST API. Otherwise, any unused port is chosen. */\n  restPort?: number;\n\n  /**\n   * Extra arguments to add to the `jormungandr` command line.\n   */\n  extraArgs?: string[];\n}\n\nexport interface GenesisBlockHash {\n  hash: string;\n}\n\nexport interface GenesisBlockFile extends GenesisBlockHash {\n  file: string;\n}\n\n/**\n * Models the command-line arguments which can be supplied to `jormungandr`.\n */\nexport interface JormungandrArgs {\n  /** Configuration file for the cardano-node. */\n  configFile: FilePath;\n\n  /** Directory where the state is stored. */\n  storageDir: DirPath;\n\n  genesisBlock: {\n    /** The file of the genesis block for this network's chain. */\n    file?: FilePath;\n    /** The hash of the genesis block for this network's chain. */\n    hash?: string;\n  };\n\n  /** BFT leaders secrets file(s). */\n  secretFile?: FilePath[];\n\n  /** Configures the address to bind for the REST API. */\n  restListen?: string;\n\n  /**\n   * Extra arguments to add to the `jormungandr` command line.\n   */\n  extra?: string[];\n}\nexport async function startJormungandr(\n  stateDir: DirPath,\n  config: JormungandrConfig\n): Promise<StartService> {\n  if (!config.restPort) {\n    config.restPort = await getPort();\n  }\n  const args = makeArgs(stateDir, config);\n  return {\n    command: 'jormungandr',\n    args: [\n      '--config',\n      args.configFile,\n      '--storage',\n      args.storageDir,\n      // note: To support log file rotation from jormungandr, capture\n      // its logs in json format and echo them into your frontend\n      // logging framework (which presumably supports log rotation).\n      // This will also mean that the node logs are correctly\n      // interleaved with the frontend logs.\n      // \"--log-format\", \"json\",\n    ]\n      .concat(args.restListen ? ['--rest-listen', args.restListen] : [])\n      .concat(\n        args.genesisBlock.file\n          ? ['--genesis-block', args.genesisBlock.file]\n          : args.genesisBlock.hash\n          ? ['--genesis-block-hash', args.genesisBlock.hash]\n          : []\n      )\n      .concat(_.flatMap(args.secretFile || [], secret => ['--secret', secret]))\n      .concat(args.extra || []),\n    supportsCleanShutdown: false,\n  };\n}\n\nfunction makeArgs(\n  stateDir: DirPath,\n  config: JormungandrConfig\n): JormungandrArgs {\n  return {\n    configFile: path.join(config.configurationDir, config.network.configFile),\n    restListen: `127.0.0.1:${config.restPort || 0}`,\n    genesisBlock: {\n      file:\n        'file' in config.network.genesisBlock\n          ? path.join(config.configurationDir, config.network.genesisBlock.file)\n          : undefined,\n      hash:\n        'hash' in config.network.genesisBlock\n          ? config.network.genesisBlock.hash\n          : undefined,\n    },\n    storageDir: path.join(stateDir, 'chain'),\n    secretFile: _.map(config.network.secretFile || [], secret =>\n      path.join(config.configurationDir, secret)\n    ),\n    extra: config.extraArgs,\n  };\n}\n","/**\n * Module for starting and managing a Cardano node and wallet backend.\n *\n * The main class is [[Launcher]].\n *\n * @packageDocumentation\n */\n\nimport path from 'path';\nimport mkdirp from 'mkdirp';\nimport process from 'process';\nimport net from 'net';\n\nimport _ from 'lodash';\nimport { EventEmitter } from 'tsee';\nimport getPort from 'get-port';\n\nimport { Logger, prependName } from './logging';\nimport {\n  Service,\n  ServiceExitStatus,\n  ServiceStatus,\n  StartService,\n  setupService,\n  serviceExitStatusMessage,\n} from './service';\nimport { DirPath } from './common';\n\nimport * as byron from './byron';\nimport * as shelley from './shelley';\nimport * as jormungandr from './jormungandr';\n\nexport {\n  ServiceStatus,\n  ServiceExitStatus,\n  serviceExitStatusMessage,\n  Service,\n} from './service';\n\n/**\n * Configuration parameters for starting the wallet backend and node.\n */\nexport interface LaunchConfig {\n  /**\n   * Directory to store wallet databases, the blockchain, socket\n   * files, etc.\n   */\n  stateDir: string;\n\n  /**\n   * Label for the network that will connected. This is used in the\n   * state directory path name.\n   */\n  networkName: string;\n\n  /**\n   * TCP port to use for the `cardano-wallet` API server.\n   * The default is to select any free port.\n   */\n  apiPort?: number;\n\n  /**\n   * IP address or hostname to bind the `cardano-wallet` API server\n   * to. Can be an IPv[46] address, hostname, or `'*'`. Defaults to\n   * 127.0.0.1.\n   */\n  listenAddress?: string;\n\n  /**\n   * Overrides the URL to the zip file containing stake pool metadata\n   * which is downloaded by cardano-wallet.\n   *\n   * This is only useful in testing scenarios, or when running a local\n   * development testnet.\n   *\n   * For Jörmungandr ITN, the default is\n   * https://github.com/cardano-foundation/incentivized-testnet-stakepool-registry/archive/master.zip.\n   */\n  stakePoolRegistryUrl?: string;\n\n  /**\n   * Maximum time difference (in seconds) between the tip slot and the\n   * latest applied block within which we consider a wallet being\n   * synced with the network. Defaults to 300 seconds.\n   */\n  syncToleranceSeconds?: number;\n\n  /**\n   * Configuration for starting `cardano-node`. The `kind` property will be one of\n   *  * `\"byron\"` - [[ByronNodeConfig]]\n   *  * `\"shelley\"` - [[ShelleyNodeConfig]]\n   *  * `\"jormungandr\"` - [[JormungandrConfig]]\n   */\n  nodeConfig:\n    | byron.ByronNodeConfig\n    | shelley.ShelleyNodeConfig\n    | jormungandr.JormungandrConfig;\n}\n\n/**\n * This is the main object which controls the launched wallet backend\n * and its node.\n *\n * Example:\n *\n * ```javascript\n * var launcher = new cardanoLauncher.Launcher({\n *   networkName: \"mainnet\",\n *   stateDir: \"/tmp/state-launcher\",\n *   nodeConfig: {\n *     kind: \"byron\",\n *     configurationDir: \"/home/user/cardano-node/configuration\",\n *     network: {\n *       configFile: \"configuration-mainnet.yaml\",\n *       genesisFile: \"mainnet-genesis.json\",\n *       genesisHash: \"5f20df933584822601f9e3f8c024eb5eb252fe8cefb24d1317dc3d432e940ebb\",\n *       topologyFile: \"mainnet-topology.json\"\n *     }\n *   }\n * });\n * ```\n *\n * Initially, the backend is not started. Use [[Launcher.start]] for that.\n */\nexport class Launcher {\n  /**\n   * Use this attribute to monitor and control the `cardano-wallet` process.\n   */\n  readonly walletService: Service;\n\n  /**\n   * Use this to access the `cardano-wallet` API server.\n   */\n  readonly walletBackend: WalletBackend;\n\n  /**\n   * Use this to monitor the `cardano-node` process.\n   */\n  readonly nodeService: Service;\n\n  /** Logging adapter */\n  protected logger: Logger;\n\n  /** Wallet API server port - set once it's known. */\n  private apiPort = 0;\n\n  /**\n   * Sets up a Launcher which can start and control the wallet backend.\n   *\n   * @param config - controls how the wallet and node are started\n   * @param logger - logging backend that launcher will use\n   */\n  constructor(config: LaunchConfig, logger: Logger = console) {\n    logger.debug('Launcher init');\n    this.logger = logger;\n\n    const start = makeServiceCommands(config, logger);\n    this.walletService = setupService(\n      start.wallet,\n      prependName(logger, 'wallet')\n    );\n    this.nodeService = setupService(start.node, prependName(logger, 'node'));\n\n    this.walletBackend = {\n      getApi: () => new V2Api(this.apiPort),\n      events: new EventEmitter<{\n        ready: (api: Api) => void;\n        exit: (status: ExitStatus) => void;\n      }>(),\n    };\n\n    start.wallet.then((startService: WalletStartService) => {\n      this.apiPort = startService.apiPort;\n    });\n\n    this.walletService.events.on('statusChanged', status => {\n      if (status === ServiceStatus.Stopped) {\n        this.logger.debug('wallet exited');\n        this.stop();\n      }\n    });\n\n    this.nodeService.events.on('statusChanged', status => {\n      if (status === ServiceStatus.Stopped) {\n        this.logger.debug('node exited');\n        this.stop();\n      }\n    });\n\n    this.installSignalHandlers();\n  }\n\n  /**\n   * Starts the wallet and node.\n   *\n   * Example:\n   *\n   * ```javascript\n   * launcher.start().then(function(api) {\n   *   console.log(\"*** cardano-wallet backend is ready, base URL is \" + api.baseUrl);\n   * });\n   * ```\n   *\n   * @return a promise that will be fulfilled when the wallet API\n   * server is ready to accept requests.\n   */\n  start(): Promise<Api> {\n    this.nodeService.start();\n    this.walletService.start();\n\n    this.waitForApi().then(() => {\n      this.walletBackend.events.emit('ready', this.walletBackend.getApi());\n    });\n\n    return new Promise((resolve, reject) => {\n      this.walletBackend.events.on('ready', resolve);\n      this.walletBackend.events.on('exit', reject);\n    });\n  }\n\n  /**\n   * Poll TCP port of wallet API server until it accepts connections.\n   * @param port - TCP port number\n   * @return a promise that is completed once the wallet API server accepts connections.\n   */\n  private waitForApi(): Promise<void> {\n    this.logger.debug('waitForApi');\n    return new Promise(resolve => {\n      let addr: net.SocketConnectOpts;\n      var client: net.Socket;\n      const poll = () => {\n        if (this.apiPort) {\n          if (!addr) {\n            addr = { port: this.apiPort, host: '127.0.0.1' };\n            this.logger.info(\n              `Waiting for tcp port ${addr.host}:${addr.port} to accept connections...`\n            );\n          }\n\n          if (client) {\n            client.destroy();\n          }\n          client = new net.Socket();\n          client.connect(addr, () => {\n            this.logger.info(`... port is ready.`);\n            clearInterval(timer);\n            resolve();\n          });\n          client.on('error', err => {\n            this.logger.debug(`waitForApi: not ready yet: ${err}`);\n          });\n        }\n      };\n      const timer = setInterval(poll, 250);\n    });\n  }\n\n  /**\n   * Stops the wallet backend. Attempts to cleanly shut down the\n   * processes. However, if they have not exited before the timeout,\n   * they will be killed.\n   *\n   * @param timeoutSeconds - how long to wait before killing the processes.\n   * @return a [[Promise]] that is fulfilled at the timeout, or before.\n   *\n   * @event exit - `walletBackend.events` will emit this when the\n   *   wallet and node have both exited.\n   */\n  stop(\n    timeoutSeconds = 60\n  ): Promise<{ wallet: ServiceExitStatus; node: ServiceExitStatus }> {\n    this.logger.debug(`Launcher.stop: stopping wallet and node`);\n    return Promise.all([\n      this.walletService.stop(timeoutSeconds),\n      this.nodeService.stop(timeoutSeconds),\n    ]).then(([wallet, node]) => {\n      const status = { wallet, node };\n      this.logger.debug(`Launcher.stop: both services are stopped.`, status);\n      this.walletBackend.events.emit('exit', status);\n      return status;\n    });\n  }\n\n  /**\n   * Stop services when this process gets killed.\n   */\n  private installSignalHandlers(): void {\n    const cleanup = (signal: string) => {\n      this.logger.info(`Received ${signal} - stopping services...`);\n      this.walletService.stop(0);\n      this.nodeService.stop(0);\n    };\n    ['SIGINT', 'SIGTERM', 'SIGHUP', 'SIGBREAK'].forEach((signal: string) =>\n      process.on(signal as any, cleanup)\n    );\n  }\n}\n\ninterface RequestParams {\n  port: number;\n  path: string;\n  hostname: string;\n}\n\n/**\n * Connection parameters for the `cardano-wallet` API.\n * These should be used to build the HTTP requests.\n */\nexport interface Api {\n  /**\n   * API base URL, including trailling slash.\n   */\n  baseUrl: string;\n\n  /**\n   * URL components which can be used with the HTTP client library of\n   * your choice.\n   */\n  requestParams: RequestParams;\n}\n\nclass V2Api implements Api {\n  /** URL of the API, including a trailling slash. */\n  readonly baseUrl: string;\n  /** URL components which can be used with the HTTP client library of\n   * your choice. */\n  readonly requestParams: RequestParams;\n\n  constructor(port: number) {\n    let hostname = '127.0.0.1';\n    let path = '/v2/';\n    this.baseUrl = `http://${hostname}:${port}${path}`;\n    this.requestParams = { port, path, hostname };\n  }\n}\n\n/**\n * The result after the launched wallet backend has finished.\n */\nexport interface ExitStatus {\n  wallet: ServiceExitStatus;\n  node: ServiceExitStatus;\n}\n\n/**\n * Format an [[ExitStatus]] as a multiline human-readable string.\n */\nexport function exitStatusMessage(status: ExitStatus): string {\n  return _.map(status, serviceExitStatusMessage).join('\\n');\n}\n\n/**\n * Represents the API service of `cardano-wallet`.\n */\nexport interface WalletBackend {\n  /**\n   * @return HTTP connection parameters for the `cardano-wallet` API server.\n   */\n  getApi(): Api;\n\n  /**\n   * An [[EventEmitter]] that can be used to register handlers when\n   * the process changes status.\n   *\n   * ```typescript\n   * launcher.walletBackend.events.on('ready', api => { ... });\n   * ```\n   */\n  events: WalletBackendEvents;\n}\n\n/**\n * The type of events for [[WalletBackend]].\n */\ntype WalletBackendEvents = EventEmitter<{\n  /**\n   * [[Launcher.walletBackend.events]] will emit this when the API\n   *  server is ready to accept requests.\n   * @event\n   */\n  ready: (api: Api) => void;\n  /** [[Launcher.walletBackend.events]] will emit this when the\n   *  wallet and node have both exited.\n   * @event\n   */\n  exit: (status: ExitStatus) => void;\n}>;\n\ninterface WalletStartService extends StartService {\n  apiPort: number;\n}\n\nfunction makeServiceCommands(\n  config: LaunchConfig,\n  logger: Logger\n): { wallet: Promise<WalletStartService>; node: Promise<StartService> } {\n  const baseDir = path.join(\n    config.stateDir,\n    config.nodeConfig.kind,\n    config.networkName\n  );\n  logger.info(\n    `Creating base directory ${baseDir} (if it doesn't already exist)`\n  );\n  const node = mkdirp(baseDir).then(() => nodeExe(baseDir, config));\n  const wallet = node.then(nodeService =>\n    walletExe(baseDir, config, nodeService)\n  );\n  return { wallet, node };\n}\n\nasync function walletExe(\n  baseDir: DirPath,\n  config: LaunchConfig,\n  node: StartService\n): Promise<WalletStartService> {\n  const apiPort = config.apiPort || (await getPort());\n  const base: WalletStartService = {\n    command: `cardano-wallet-${config.nodeConfig.kind}`,\n    args: [\n      'serve',\n      '--shutdown-handler',\n      '--port',\n      '' + apiPort,\n      '--database',\n      path.join(baseDir, 'wallet'),\n    ].concat(\n      config.listenAddress ? ['--listen-address', config.listenAddress] : [],\n      config.syncToleranceSeconds\n        ? ['--sync-tolerance', `${config.syncToleranceSeconds}s`]\n        : []\n    ),\n    extraEnv: config.stakePoolRegistryUrl\n      ? { CARDANO_WALLET_STAKE_POOL_REGISTRY_URL: config.stakePoolRegistryUrl }\n      : undefined,\n    supportsCleanShutdown: true,\n    apiPort,\n  };\n  const addArgs = (args: string[]): WalletStartService =>\n    _.assign(base, { args: base.args.concat(args) });\n\n  switch (config.nodeConfig.kind) {\n    case 'jormungandr':\n      return addArgs([\n        '--genesis-block-hash',\n        config.nodeConfig.network.genesisBlock.hash,\n        '--node-port',\n        '' + config.nodeConfig.restPort,\n      ]);\n    case 'byron':\n      return addArgs(\n        config.nodeConfig.socketDir\n          ? ['--node-socket', config.nodeConfig.socketDir]\n          : []\n      );\n    case 'shelley':\n      return base;\n  }\n}\n\nfunction nodeExe(\n  baseDir: DirPath,\n  config: LaunchConfig\n): Promise<StartService> {\n  switch (config.nodeConfig.kind) {\n    case 'jormungandr':\n      return jormungandr.startJormungandr(baseDir, config.nodeConfig);\n    case 'byron':\n      return byron.startByronNode(baseDir, config.nodeConfig);\n    case 'shelley':\n      return shelley.startShelleyNode(config.nodeConfig);\n  }\n}\n","/**\n * `cardano-launcher` command-line interface.\n *\n * This tool can be used for testing.\n *\n * See also: the entrypoint script `bin/cardano-launcher`.\n *\n * @packageDocumentation\n */\n\nimport process from 'process';\nimport _ from 'lodash';\n\nimport {\n  Launcher,\n  ExitStatus,\n  ServiceExitStatus,\n  serviceExitStatusMessage,\n} from './cardanoLauncher';\n\nimport * as byron from './byron';\nimport * as jormungandr from './jormungandr';\n\nfunction combineStatus(statuses: ServiceExitStatus[]): number {\n  let code = _.reduce(\n    statuses,\n    (res: number | null, status) => (res === null ? status.code : res),\n    null\n  );\n  let signal = _.reduce(\n    statuses,\n    (res: string | null, status) => (res === null ? status.signal : res),\n    null\n  );\n  // let err = _.reduce(statuses, (res, status) => res === null ? status.err : res, null);\n\n  return code === null ? (signal === null ? 0 : 127) : code;\n}\n\n/**\n * Main function of the CLI.\n *\n * Is just a very basic interface for testing things.\n */\nexport function cli(args: string[]) {\n  const waitForExit = setInterval(function() {}, 3600000);\n\n  args.shift(); // /usr/bin/node\n  args.shift(); // cardano-launcher\n\n  if (args.length < 4) {\n    usage();\n  }\n\n  const backend = args.shift() as string;\n  const networkName = args.shift() as string;\n  const configurationDir = args.shift() as string;\n  const stateDir = args.shift() as string;\n\n  let nodeConfig: any;\n\n  if (backend === 'byron') {\n    if (!(networkName in byron.networks)) {\n      console.error(`unknown network: ${networkName}`);\n      process.exit(2);\n    }\n    const network = byron.networks[networkName];\n    nodeConfig = {\n      kind: backend,\n      configurationDir,\n      network,\n    };\n  } else if (backend === 'jormungandr') {\n    if (!(networkName in jormungandr.networks)) {\n      console.error(`unknown network: ${networkName}`);\n      process.exit(2);\n    }\n    const network = jormungandr.networks[networkName];\n    nodeConfig = {\n      kind: backend,\n      configurationDir,\n      network,\n    };\n  } else {\n    usage();\n  }\n\n  const launcher = new Launcher({ stateDir, nodeConfig, networkName }, console);\n\n  launcher.start();\n\n  // inform tests of subprocess pids\n  launcher.nodeService.start().then(pid => sendMaybe({ node: pid }));\n  launcher.walletService.start().then(pid => sendMaybe({ wallet: pid }));\n\n  launcher.walletBackend.events.on('exit', (status: ExitStatus) => {\n    console.log(serviceExitStatusMessage(status.wallet));\n    console.log(serviceExitStatusMessage(status.node));\n    clearInterval(waitForExit);\n    process.exit(combineStatus([status.wallet, status.node]));\n  });\n}\n\nfunction usage() {\n  console.log('usage: cardano-launcher BACKEND NETWORK CONFIG-DIR STATE-DIR');\n  console.log('  BACKEND    - either jormungandr or byron');\n  console.log(\n    '  NETWORK    - depends on backend, e.g. mainnet, itn_rewards_v1'\n  );\n  console.log(\n    '  CONFIG-DIR - directory which contains config files for a backend'\n  );\n  console.log('  STATE-DIR  - directory to put blockchains, databases, etc.');\n  process.exit(1);\n}\n\nfunction sendMaybe(message: object) {\n  if (process.send) {\n    process.send(message);\n  }\n}\n"],"names":["prependName","logger","name","prefix","severity","msg","param","prefixed","debug","info","error","serviceExitStatusMessage","res","reason","code","signal","err","exe","ServiceStatus","setupService","cfgPromise","console","events","EventEmitter","status","NotStarted","cfg","proc","exitStatus","killTimer","startPromise","doStart","envStr","_","map","extraEnv","value","join","commandStr","command","args","stdio","supportsCleanShutdown","cwd","env","Object","assign","process","options","spawn","setStatus","Started","on","onStopped","pid","doStop","timeoutSeconds","Stopping","stdin","end","kill","setTimeout","clearTimeout","Stopped","waitForStop","Promise","resolve","waitForExit","defaultExitStatus","Starting","newStatus","emit","start","then","theCfg","stop","getStatus","getProcess","startByronNode","stateDir","config","getPort","listenPort","makeArgs","socketDir","topologyFile","databaseDir","genesis","file","hash","listen","port","configFile","concat","address","validateDb","signingKey","delegationCertificate","extra","networks","mainnet","genesisFile","genesisHash","path","configurationDir","network","startShelleyNode","Error","startJormungandr","storageDir","restListen","genesisBlock","flatMap","secretFile","secret","restPort","itn_rewards_v1","self","undefined","extraArgs","walletExe","baseDir","node","apiPort","base","nodeConfig","kind","listenAddress","syncToleranceSeconds","stakePoolRegistryUrl","CARDANO_WALLET_STAKE_POOL_REGISTRY_URL","addArgs","Launcher","makeServiceCommands","walletService","wallet","nodeService","walletBackend","getApi","V2Api","startService","installSignalHandlers","waitForApi","reject","addr","client","poll","host","destroy","net","Socket","connect","clearInterval","timer","setInterval","all","cleanup","forEach","hostname","baseUrl","requestParams","exitStatusMessage","networkName","mkdirp","nodeExe","jormungandr","byron","shelley","combineStatus","statuses","reduce","cli","shift","length","usage","backend","exit","launcher","sendMaybe","log","message","send"],"mappings":"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"}